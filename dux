#!/usr/bin/env python

import os
import argparse
from stat import *

class Directory:
    def __init__(self, path, dirname):
        self.path = path
        self.dirname = dirname
        self.subdirs = []
        self.mysize  = 0
        self.subdir_size = -1 # size of subdirs not calced yet

    def research(self):
        for e in os.listdir(self.path):
            e_path = self.path + '/' + e;
            st = os.lstat(e_path);
            if S_ISDIR(st.st_mode):
                self.subdirs.append(Directory(e_path, e))
            else:
                self.mysize += st.st_size

        # perform research for collected subdirs too
        for d in self.subdirs:
            try:
                d.research()
            except OSError:
                # TODO: make this skip optional
                pass

    def get_size(self):
        if self.subdir_size == -1:
            self.subdir_size = 0
            for d in self.subdirs:
                size = d.get_size()
                self.subdir_size += size[0] + size[1]

        return (self.mysize, self.subdir_size)

    def get_total_size(self):
        size = self.get_size()
        return size[0] + size[1]

    def get_path(self):
        return self.path

    def get_subdirs(self):
        return self.subdirs


def humanize_size(n):
    suffix = ('', 'K', 'M', 'G', 'T', 'P', 'E')
    for s in suffix:
        if n < 1024 or s == 'E':
            return '%.1f%s' % (n, s)
        n /= 1024.0


def humanize_percent(x, total):
    p = x * 100.0 / total if total > 0 else 0
    return '%d' % p if p > 1 or p == 0 else '%.1f' % p

def sort_dirs_totalsize(dirs):
    return sorted(dirs, key=lambda d: d.get_total_size(), reverse=True)


class ConsoleVisualizer:
    def __init__(self, root, minpercent, minpercent_parent,
                 pfn_sort_dirs = sort_dirs_totalsize):
        self.root = root
        self.minpercent = minpercent
        self.minpercent_parent = minpercent_parent
        self.total_size = root.get_total_size()
        self.pfn_sort_dirs = pfn_sort_dirs

    def _match_criteria(self, d, parent_size):
        sz = d.get_total_size()
        perc = sz * 100.0 / self.total_size  if self.total_size else 0
        perc_parent = sz * 100.0 / parent_size if parent_size else 0
        return perc >= self.minpercent and perc_parent >= self.minpercent_parent

    def _print_dir(self, curdir, depth, prefix, islast, parent_size):
        sz = curdir.get_total_size() 
        print '%s%s%s [%s, %s%%]' % (
              prefix, '' if depth == 0 else ' \_ ',
              curdir.path if depth == 0 else curdir.dirname,
              humanize_size(sz), humanize_percent(sz, self.total_size)
        )

        dirs = filter(lambda d: self._match_criteria(d, parent_size), 
                      curdir.get_subdirs())
        dirs = self.pfn_sort_dirs(dirs)

        nvis = len(dirs)
        for i in xrange(0, nvis):
            if (depth == 0):
                pr = ''
            else:
                pr = prefix + ('    ' if (islast) else ' |  ')

            self._print_dir(dirs[i], depth + 1, pr, i+1 == nvis, sz)

    def visualize(self):
        self._print_dir(self.root, 0, '', True, self.total_size)
    
         

parser = argparse.ArgumentParser(description=
                                 'Visualize size of directory-content')
parser.add_argument('directory', metavar='dir', type=str,
                    help='directory to visualize')
parser.add_argument('-P', '--percent-total', metavar='num', 
                    type=float, default=0,
                    help='minimal percent of total size to print directory')
parser.add_argument('-p', '--percent-parent', metavar='num',
                    type=float, default=0,
                    help='minimal percent of parent size to print directory')
args = parser.parse_args()

root = Directory(args.directory, "/")
root.research()

ConsoleVisualizer(root, args.percent_total, args.percent_parent).visualize()
